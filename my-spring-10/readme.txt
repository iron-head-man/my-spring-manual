在 Spring 中有一个 Event 事件功能，它可以提供事件的定义、发布以及监听
事件来完成一些自定义的动作。比如你可以定义一个新用户注册的事件，当有
用户执行注册完成后，在事件监听中给用户发送一些优惠券和短信提醒，这样
的操作就可以把属于基本功能的注册和对应的策略服务分开，降低系统的耦
合。以后在扩展注册服务，比如需要添加风控策略、添加实名认证、判断用户
属性等都不会影响到依赖注册成功后执行的动作。

那么在本章节我们需要以观察者模式的方式，设计和实现 Spring Event 的容
器事件和事件监听器功能，最终可以让我们在现有实现的 Spring 框架中可以
定义、监听和发布自己的事件信息。

其实事件的设计本身就是一种观察者模式的实现，它所要解决的就是一个对象
状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协
作。
在功能实现上我们需要定义出事件类、事件监听、事件发布，而这些类的功能
需要结合到 Spring 的 AbstractApplicationContext#refresh()，以便于处理
事件初始化和注册事件监听器的操作。